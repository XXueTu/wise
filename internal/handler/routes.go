// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.1

package handler

import (
	"net/http"

	api "github.com/XXueTu/wise/internal/handler/api"
	models "github.com/XXueTu/wise/internal/handler/models"
	resources "github.com/XXueTu/wise/internal/handler/resources"
	tags "github.com/XXueTu/wise/internal/handler/tags"
	"github.com/XXueTu/wise/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// API基础
				Method:  http.MethodPost,
				Path:    "/api/base",
				Handler: api.BaseHandler(serverCtx),
			},
			{
				// URL链接识别
				Method:  http.MethodPost,
				Path:    "/api/url",
				Handler: api.UrlHandler(serverCtx),
			},
		},
		rest.WithPrefix("/wise"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建模型
				Method:  http.MethodPost,
				Path:    "/api/models",
				Handler: models.CreateModelHandler(serverCtx),
			},
			{
				// 更新模型
				Method:  http.MethodPut,
				Path:    "/api/models",
				Handler: models.UpdateModelHandler(serverCtx),
			},
			{
				// 删除模型
				Method:  http.MethodDelete,
				Path:    "/api/models",
				Handler: models.DeleteModelHandler(serverCtx),
			},
			{
				// 获取单个模型
				Method:  http.MethodGet,
				Path:    "/api/models",
				Handler: models.GetModelHandler(serverCtx),
			},
			{
				// 分页查询模型列表
				Method:  http.MethodPost,
				Path:    "/api/models/list",
				Handler: models.ListModelHandler(serverCtx),
			},
		},
		rest.WithPrefix("/wise"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建AI资源
				Method:  http.MethodPost,
				Path:    "/api/ai/resources",
				Handler: resources.CreateAiResourceHandler(serverCtx),
			},
			{
				// 创建资源
				Method:  http.MethodPost,
				Path:    "/api/resources",
				Handler: resources.CreateResourceHandler(serverCtx),
			},
			{
				// 更新资源
				Method:  http.MethodPut,
				Path:    "/api/resources",
				Handler: resources.UpdateResourceHandler(serverCtx),
			},
			{
				// 删除资源
				Method:  http.MethodDelete,
				Path:    "/api/resources",
				Handler: resources.DeleteResourceHandler(serverCtx),
			},
			{
				// 获取单个资源
				Method:  http.MethodGet,
				Path:    "/api/resources",
				Handler: resources.GetResourceHandler(serverCtx),
			},
			{
				// 分页查询资源列表
				Method:  http.MethodPost,
				Path:    "/api/resources/list",
				Handler: resources.ListResourceHandler(serverCtx),
			},
		},
		rest.WithPrefix("/wise"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// 创建标签
				Method:  http.MethodPost,
				Path:    "/api/tag",
				Handler: tags.CreateTagHandler(serverCtx),
			},
			{
				// 更新标签
				Method:  http.MethodPut,
				Path:    "/api/tag",
				Handler: tags.UpdateTagHandler(serverCtx),
			},
			{
				// 删除标签
				Method:  http.MethodDelete,
				Path:    "/api/tag",
				Handler: tags.DeleteTagHandler(serverCtx),
			},
			{
				// 获取标签详情
				Method:  http.MethodGet,
				Path:    "/api/tag",
				Handler: tags.GetTagHandler(serverCtx),
			},
			{
				// 获取标签列表
				Method:  http.MethodGet,
				Path:    "/api/tags",
				Handler: tags.ListTagHandler(serverCtx),
			},
		},
		rest.WithPrefix("/wise"),
	)
}
